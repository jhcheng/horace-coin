package com.horace.coin.tx;

import java.util.Arrays;

public class OP {

    public enum OP_CODE_FUNCTIONS {

    }

    public enum OP_CODE_NAMES {
        OP_0(0),
        OP_PUSHBYTES_1(1),
        OP_PUSHBYTES_2(2),
        OP_PUSHBYTES_3(3),
        OP_PUSHBYTES_4(4),
        OP_PUSHBYTES_5(5),
        OP_PUSHBYTES_6(6),
        OP_PUSHBYTES_7(7),
        OP_PUSHBYTES_8(8),
        OP_PUSHBYTES_9(9),
        OP_PUSHBYTES_10(10),
        OP_PUSHBYTES_11(11),
        OP_PUSHBYTES_12(12),
        OP_PUSHBYTES_13(13),
        OP_PUSHBYTES_14(14),
        OP_PUSHBYTES_15(15),
        OP_PUSHBYTES_16(16),
        OP_PUSHBYTES_17(17),
        OP_PUSHBYTES_18(18),
        OP_PUSHBYTES_19(19),
        OP_PUSHBYTES_20(20),
        OP_PUSHBYTES_21(21),
        OP_PUSHBYTES_22(22),
        OP_PUSHBYTES_23(23),
        OP_PUSHBYTES_24(24),
        OP_PUSHBYTES_25(25),
        OP_PUSHBYTES_26(26),
        OP_PUSHBYTES_27(27),
        OP_PUSHBYTES_28(28),
        OP_PUSHBYTES_29(29),
        OP_PUSHBYTES_30(30),
        OP_PUSHBYTES_31(31),
        OP_PUSHBYTES_32(32),
        OP_PUSHBYTES_33(33),
        OP_PUSHBYTES_34(34),
        OP_PUSHBYTES_35(35),
        OP_PUSHBYTES_36(36),
        OP_PUSHBYTES_37(37),
        OP_PUSHBYTES_38(38),
        OP_PUSHBYTES_39(39),
        OP_PUSHBYTES_40(40),
        OP_PUSHBYTES_41(41),
        OP_PUSHBYTES_42(42),
        OP_PUSHBYTES_43(43),
        OP_PUSHBYTES_44(44),
        OP_PUSHBYTES_45(45),
        OP_PUSHBYTES_46(46),
        OP_PUSHBYTES_47(47),
        OP_PUSHBYTES_48(48),
        OP_PUSHBYTES_49(49),
        OP_PUSHBYTES_50(50),
        OP_PUSHDATA1(76),
        OP_PUSHDATA2(77),
        OP_PUSHDATA4(78),
        OP_1NEGATE(79),
        OP_1(81),
        OP_2(82),
        OP_3(83),
        OP_4(84),
        OP_5(85),
        OP_6(86),
        OP_7(87),
        OP_8(88),
        OP_9(89),
        OP_10(90),
        OP_11(91),
        OP_12(92),
        OP_13(93),
        OP_14(94),
        OP_15(95),
        OP_16(96),
        OP_NOP(97),
        OP_IF(99),
        OP_NOTIF(100),
        OP_ELSE(103),
        OP_ENDIF(104),
        OP_VERIFY(105),
        OP_RETURN(106),
        OP_TOALTSTACK(107),
        OP_FROMALTSTACK(108),
        OP_2DROP(109),
        OP_2DUP(110),
        OP_3DUP(111),
        OP_2OVER(112),
        OP_2ROT(113),
        OP_2SWAP(114),
        OP_IFDUP(115),
        OP_DEPTH(116),
        OP_DROP(117),
        OP_DUP(118),
        OP_NIP(119),
        OP_OVER(120),
        OP_PICK(121),
        OP_ROLL(122),
        OP_ROT(123),
        OP_SWAP(124),
        OP_TUCK(125),
        OP_SIZE(130),
        OP_EQUAL(135),
        OP_EQUALVERIFY(136),
        OP_1ADD(139),
        OP_1SUB(140),
        OP_NEGATE(143),
        OP_ABS(144),
        OP_NOT(145),
        OP_0NOTEQUAL(146),
        OP_ADD(147),
        OP_SUB(148),
        OP_BOOLAND(154),
        OP_BOOLOR(155),
        OP_NUMEQUAL(156),
        OP_NUMEQUALVERIFY(157),
        OP_NUMNOTEQUAL(158),
        OP_LESSTHAN(159),
        OP_GREATERTHAN(160),
        OP_LESSTHANOREQUAL(161),
        OP_GREATERTHANOREQUAL(162),
        OP_MIN(163),
        OP_MAX(164),
        OP_WITHIN(165),
        OP_RIPEMD160(166),
        OP_SHA1(167),
        OP_SHA256(168),
        OP_HASH160(169),
        OP_HASH256(170),
        OP_CODESEPARATOR(171),
        OP_CHECKSIG(172),
        OP_CHECKSIGVERIFY(173),
        OP_CHECKMULTISIG(174),
        OP_CHECKMULTISIGVERIFY(175),
        OP_NOP1(176),
        OP_CHECKLOCKTIMEVERIFY(177),
        OP_CHECKSEQUENCEVERIFY(178),
        OP_NOP4(179),
        OP_NOP5(180),
        OP_NOP6(181),
        OP_NOP7(182),
        OP_NOP8(183),
        OP_NOP9(184),
        OP_NOP10(185),
        ;

        public static OP_CODE_NAMES find(int code) {
            return Arrays.stream(values()).filter(opCodeNames -> opCodeNames.code == code).findFirst().orElse(null);
        }

        private int code;
        OP_CODE_NAMES(int code) {
            this.code = code;
        }
    }

}
